 @page "/dashboard" 
 @using Expenses_tracker.Services
 @using Expenses_tracker.Models
 @using Newtonsoft.Json

<div class="dashboard-container"> 
    <!-- financial overview section --> 
    <section class="mb-4"> 
        <h2 class="mb-4">financial overview</h2> 
        <div class="row g-4"> 
            <div class="col-md-3"> 
                <div class="overview-card"> 
                    <div class="d-flex justify-content-between mb-2"> 
                        <span class="text-muted">Total Balance</span> 
                        <i class="bi bi-wallet2"></i> 
                    </div> 
                    <h3 class="mb-0">$@StaticValue.TotalBalance</h3> 
                </div> 
            </div> 
            <div class="col-md-3"> 
                <div class="overview-card"> 
                    <div class="d-flex justify-content-between mb-2"> 
                        <span class="text-muted">Total Income</span> 
                        <i class="bi bi-star"></i> 
                    </div> 
                    <h3 class="mb-0">$@income</h3> 
                    <small class="text-muted">month to date</small> 
                </div> 
            </div> 
            <div class="col-md-3"> 
                <div class="overview-card"> 
                    <div class="d-flex justify-content-between mb-2"> 
                        <span class="text-muted">Total Expenses</span> 
                        <i class="bi bi-graph-down"></i> 
                    </div> 
                    <h3 class="mb-0">$@Expense</h3> 
                    <small class="text-muted">month to date</small> 
                </div> 
            </div> 
            <div class="col-md-3"> 
                <div class="overview-card"> 
                    <div class="d-flex justify-content-between mb-2"> 
                        <span class="text-muted">Total Debt</span> 
                        <i class="bi bi-credit-card"></i> 
                    </div> 
                    <h3 class="mb-0">$@Debt</h3> 
                    <small class="text-muted">3 pending payments</small> 
                </div> 
            </div> 
        </div> 
    </section> 

    <!-- pending debts section --> 
    <section class="mb-4"> 
        <div class="d-flex justify-content-between align-items-center mb-3"> 
            <h3>Pending Debts</h3> 
            <div class="dropdown"> 
                <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown"> 
                    filter 
                </button> 
                <ul class="dropdown-menu"> 
                    <li><a class="dropdown-item" href="#">all</a></li> 
                    <li><a class="dropdown-item" href="#">this month</a></li> 
                    <li><a class="dropdown-item" href="#">last month</a></li> 
                </ul> 
            </div> 
        </div> 


        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Notes</th>
                        <th class="text-muted">Due Date</th>
                        <th class="text-end">Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Debts != null && Debts.Any())
                    {
                        foreach (var debt in Debts)
                        {
                            <tr>
                                <td>@debt.Notes</td>
                                <td class="text-muted">@debt.DueDate</td>
                                <td class="text-end">$@debt.Amount</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="text-center">No unpaid debts found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </section> 

    <!-- recent transactions section --> 
    <section> 
        <div class="d-flex justify-content-between align-items-center mb-3"> 
            <h3>Recent Transactions</h3> 
            <div class="d-flex gap-3"> 
                <input type="search" class="form-control" placeholder="search..."> 
                <div class="dropdown"> 
                    <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown"> 
                        filter 
                    </button> 
                    <ul class="dropdown-menu"> 
                        <li><a class="dropdown-item" href="#">all</a></li> 
                        <li><a class="dropdown-item" href="#">income</a></li> 
                        <li><a class="dropdown-item" href="#">expense</a></li> 
                    </ul> 
                </div> 
            </div> 
        </div> 
        

            <div class="table-responsive">
                <table class="table">
                    <tbody>
                                @if (TransactionsData != null && TransactionsData.Any())
                        {
                                    foreach (var transaction in TransactionsData)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center gap-2">
                                            <div class="transaction-icon @(transaction.Type == "Income" ? "bg-success" : "bg-danger")">
                                                <i class="bi @(transaction.Type == "Income" ? "bi-wallet2" : "bi-cart")"></i>
                                            </div>
                                            @transaction.Title
                                        </div>
                                    </td>
                                    <td class="text-muted">@transaction.Date</td>
                                    <td class="text-end @(transaction.Type == "Income" ? "text-success" : "text-danger")">
                                        $@transaction.Amount
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" class="text-center">No transactions available.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
 
    </section> 
</div> 

@code {
    private decimal income;
    private decimal Expense;
    private decimal Debt;

    public string FilePath = "C:\\Users\\sthar\\OneDrive\\Desktop\\Expenses-tracker\\Database\\users.json";

    protected override async Task OnInitializedAsync()
    {
        income = await FetchTotalIncome();
        Expense = await FetchTotalExpense();
        Debt = await FetchTotalDebt();
        await FetchUnPaidDebt(FilePath);
        await FetchLimitedTransactions(FilePath);

    }
    public async Task<decimal> FetchTotalIncome()
    {


        // Ensure the file exists to prevent runtime exceptions
        if (!File.Exists(FilePath))
        {
            throw new FileNotFoundException("The specified JSON file was not found.", FilePath);
        }

        // Load JSON data from file
        string jsonData = await File.ReadAllTextAsync(FilePath);

        // Deserialize JSON data to a list of User objects
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        // Calculate total income across all users
        decimal totalIncome = 0;

        foreach (var user in users)
        {
            foreach (var transaction in user.Transactions)
            {
                if (transaction.Type.Equals("Income", StringComparison.OrdinalIgnoreCase))
                {
                    totalIncome += transaction.Amount;
                }
            }
        }

        return totalIncome;
    }

    public async Task<decimal> FetchTotalExpense()
    {


        // Ensure the file exists to prevent runtime exceptions
        if (!File.Exists(FilePath))
        {
            throw new FileNotFoundException("The specified JSON file was not found.", FilePath);
        }

        // Load JSON data from file
        string jsonData = await File.ReadAllTextAsync(FilePath);

        // Deserialize JSON data to a list of User objects
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        // Calculate total income across all users
        decimal totalExpense = 0;

        foreach (var user in users)
        {
            foreach (var transaction in user.Transactions)
            {
                if (transaction.Type.Equals("Expense", StringComparison.OrdinalIgnoreCase))
                {
                    totalExpense += transaction.Amount;
                }
            }
        }

        return totalExpense;
        ;
    }
    public async Task<decimal> FetchTotalDebt()
    {


        // Ensure the file exists to prevent runtime exceptions
        if (!File.Exists(FilePath))
        {
            throw new FileNotFoundException("The specified JSON file was not found.", FilePath);
        }

        // Load JSON data from file
        string jsonData = await File.ReadAllTextAsync(FilePath);

        // Deserialize JSON data to a list of User objects
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        // Calculate total income across all users
        decimal totaldeft = 0;

        foreach (var user in users)
        {
            foreach (var debt in user.Debts)
            {

                totaldeft += debt.Amount;

            }
        }

        return totaldeft;
    }

    public static List<DebtModels> Debts { get; private set; } = new();


    public static async Task FetchUnPaidDebt(string FilePath)
    {

        if (!File.Exists(FilePath))
        {
            Console.WriteLine("File not found.");
            return;
        }
        try
        {
            string jsonData = await File.ReadAllTextAsync(FilePath);

            // Deserialize JSON to a list of users
            var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

            // Fetch all unpaid debts
            var unpaidDebts = users.SelectMany(user => user.Debts)
                                    .Where(debt => !debt.IsPaid)
                                    .ToList();

            Debts = unpaidDebts;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while processing the file: {ex.Message}");
        }

    }
    public static List<Transactions> TransactionsData { get; private set; } = new();

    public static async Task FetchLimitedTransactions(string filePath)
    {
        if (!File.Exists(filePath))
        {
            Console.WriteLine("File not found.");
            
        }

        string jsonData = await File.ReadAllTextAsync(filePath);

        // Deserialize JSON to a list of users
        var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

        // Fetch the first 'limit' transactions
        var transactions = users.SelectMany(user => user.Transactions)
                                 .OrderByDescending(t => t.Date) // Optional: Sort by Date
                                 .Take(4)
                                 .ToList();

        TransactionsData = transactions;
    }


   

} 

 <style> 
     .dashboard-container { 
         padding: 1rem; 
     } 

     .overview-card { 
         background: white; 
         padding: 1.5rem; 
         border-radius: 8px; 
         box-shadow: 0 1px 3px rgba(0,0,0,0.1); 
     } 

     .transaction-icon { 
         width: 40px; 
         height: 40px; 
         border-radius: 50%; 
         background-color: #fee2e2; 
         display: flex; 
         align-items: center; 
         justify-content: center; 
         color: #dc2626; 
     } 

         .transaction-icon.bg-success { 
             background-color: #dcfce7; 
             color: #16a34a; 
         } 

     .table td { 
         vertical-align: middle; 
     } 

     .dropdown-toggle::after { 
         margin-left: 0.5em; 
     } 
 </style> 